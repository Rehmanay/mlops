AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  GitUser:
    Type: String
    Description: Github username of the Github Star Connection
    Default: <git-user>

  GitRepoName:
    Type: String
    Description: Name of git repo.
    Default: <git-repo>

  GitRepoBranch:
    Type: String
    Description: Branch Containing the ECR Dockerfile.
    Default: <git-branch>

  EcrRepoName:
    Type: String
    Description: Repository name in the ECR.
    Default: <ecr-repo>

  EcrRepoTag:
    Type: String
    Description: Repository tag in the ECR.
    Default: <ecr-img-tag>
 
  S3BucketName:
    Type: String
    Description: Name of the Bucket in S3
    Default: <bucket-name>

  GitConn:
    Type: String
    Description: Github App Connection String
    Default: <git-conn-arn>

Resources:
  BuildEcrImage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ecr-build-${EcrRepoName}
      Description: "Build ECR Docker Image and push to the ECR."
      ServiceRole: !GetAtt BuildEcrImageRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
              install:
                  runtime-versions:
                      python: 3.8
              pre_build:
                  commands:
                      - echo "Build Version=01"
                      - echo Stage-1 Updating Packages ...
                      - pip install --upgrade pip
              build:
                  commands:
                      - echo Stage-2 Logging into ECR and Docker Image Build ...
                      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                      - docker build --build-arg REGION=$AWS_DEFAULT_REGION -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG .
                      - echo Stage-2 Completed
              post_build:
                  commands:
                      - echo Stage-3 Create ECR Repository and Push ECR Image ...
                      - aws ecr create-repository --repository-name $IMAGE_REPO_NAME --region $AWS_DEFAULT_REGION || true
                      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                      - echo Stage-3 Completed ...
                      - echo Build completed on `date`

      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: IMAGE_REPO_NAME
            Value: !Ref EcrRepoName
          - Name: IMAGE_TAG
            Value: !Ref EcrRepoTag
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: AWS_DEFAULT_REGION
            Value: !Sub ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub ecr-build-${EcrRepoName}

  PyMSSQLLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'pymssql'
      Content:
        S3Bucket: !Ref S3BucketName
        S3Key: 'etl/pymssql.zip'
    
  ETLJobLambda: 
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'run_glue_etl_job'
      Handler: 'lambda_function.lambda_handler'
      Role: !GetAtt EtlLambdaRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 'etl/lambda_function.zip'
      Runtime: 'python3.13'
      Timeout: 900
      MemorySize: 128
      Layers:
        - !Ref PyMSSQLLayer

  SMTrainingJobLambda: 
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'run_sm_training_job'
      Handler: 'lambda_function.lambda_handler'
      Role: !GetAtt TrainingLambdaRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 'training/lambda_function.zip'
      Runtime: 'python3.13'
      Timeout: 900
      MemorySize: 128

  MLOpsPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}
      RoleArn: !GetAtt CodepipelineRole.Arn
      ArtifactStore:
          Type: S3
          Location: !Sub ${S3BucketName}
      Stages:
        - Name: Source
          Actions:
            - Name: RepoConnection
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeStarSourceConnection
              OutputArtifacts: 
                - Name: RepoConnectionOutput
              Configuration:
                ConnectionArn: !Sub ${GitConn}
                FullRepositoryId: !Sub ${GitUser}/${GitRepoName}
                BranchName: !Sub ${GitRepoBranch}
              RunOrder: 1

        - Name: EcrImageBuild
          Actions:
            - Name: BuildImage
              InputArtifacts:
                - Name: RepoConnectionOutput
              OutputArtifacts:
                - Name: EcrImageBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildEcrImage
              RunOrder: 1

        - Name: PreprocessingETL
          Actions:
            - Name: GlueJob
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              Configuration:
                FunctionName: !Ref ETLJobLambda
                UserParameters: !Sub |
                  {
                    "bucket_name": "${S3BucketName}",
                    "json_location": "etl/etl.json",
                    "--JOB_NAME": "img-preprocessing",
                    "--S3_SRC_BUCKET": "${S3BucketName}",
                    "--S3_TARGET_BUCKET": "${S3BucketName}",
                    "--S3_RAW_DATA_DIR": "raw_data",
                    "--S3_TARGET_DATA_DIR": "training/data"
                  }
              RunOrder: 1

        - Name: ModelTraining
          Actions:
            - Name: SageMakerTraining
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              Configuration:
                FunctionName: !Ref SMTrainingJobLambda
                UserParameters: !Sub |
                  {
                    "bucket_name": "${S3BucketName}",
                    "json_location": "training/tj.json"
                  }
              RunOrder: 1



  # Role for CodeBuild to register ECR Image
  BuildEcrImageRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BuildEcrImageRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BuildEcrImagePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:CreateRepository
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:DescribeRepositories
                Resource: 
                  - "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - arn:aws:s3:::*/*
                  - arn:aws:s3:::codepipeline-<region>-*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:<region>:<account-id>:log-group:/aws/codebuild/docker-image
                  - arn:aws:logs:<region>:<account-id>:log-group:/aws/codebuild/docker-image:*
                  - "*"
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: "*"
              - Effect: Allow
                Action:
                  - codestar-connections:GetConnectionToken
                  - codestar-connections:GetConnection
                  - codeconnections:UseConnection
                Resource: <git-conn-arn>
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource: arn:aws:codebuild:<region>:<account-id>:report-group/docker-image-*
  
  # Role for the Glue Etl Job
  GlueEtlRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GlueEtlRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GlueEtlPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

        - PolicyName: "LogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: "logs:CreateLogGroup"
                Resource: "arn:aws:logs:<region>:<account-id>:*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:<region>:<account-id>:log-group:/aws/lambda/lambda:*"
  
  # SageMaker Training Job Role
  SmTrainingRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: SmTrainingRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "sagemaker.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "ECRPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                Resource: "*"
        - PolicyName: "S3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                  - "s3-object-lambda:*"
                Resource: "*"
        - PolicyName: "SageMakerPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sagemaker:CreateTrainingJob"
                  - "sagemaker:DescribeTrainingJob"
                  - "sagemaker:StopTrainingJob"
                Resource: "*"
        - PolicyName: "LogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: "logs:CreateLogGroup"
                Resource: "arn:aws:logs:<region>:<account-id>:*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:<region>:<account-id>:log-group:/aws/lambda/lambda:*"

  # ETL Lambda Role
  EtlLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EtlLambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com" 
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "GluePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "glue:CreateJob"
                  - "glue:StartJobRun"
                  - "glue:GetJobRun"
                  - "glue:GetJobRuns"
                  - "glue:GetJob"
                Resource: "*"
        - PolicyName: "LogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: "logs:CreateLogGroup"
                Resource: "arn:aws:logs:<region>:<account-id>:*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:<region>:<account-id>:log-group:/aws/lambda/lambda:*"
        - PolicyName: "S3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                  - "s3-object-lambda:*"
                Resource: "*"
        - PolicyName: "CodePipelinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "Statement1"
                Effect: "Allow"
                Action:
                  - "codepipeline:PutJobSuccessResult"
                  - "codepipeline:PutJobFailureResult"
                Resource: "*"
        - PolicyName: "PassRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "iam:PassRole"
                Resource: "arn:aws:iam::<account-id>:role/GlueEtlRole"

  # SageMaker Training Lambda Role
  TrainingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "TrainingLambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com" 
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "SageMakerPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sagemaker:CreateTrainingJob"
                  - "sagemaker:DescribeTrainingJob"
                  - "sagemaker:StopTrainingJob"
                Resource: "*"
        - PolicyName: "S3FullAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                  - "s3-object-lambda:*"
                Resource: "*"
        - PolicyName: "LogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: "logs:CreateLogGroup"
                Resource: "arn:aws:logs:<region>:<account-id>:*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:<region>:<account-id>:log-group:/aws/lambda/lambda:*"
        - PolicyName: "PassRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "iam:PassRole"
                Resource: "arn:aws:iam::<account-id>:role/SmTrainingRole"
        - PolicyName: "CodePipelinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "Statement1"
                Effect: "Allow"
                Action:
                  - "codepipeline:PutJobSuccessResult"
                  - "codepipeline:PutJobFailureResult"
                Resource: "*"

  # Codepipeline Role
  CodepipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "CodepipelineRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "PassRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "iam:PassRole"
                Resource: "*"
                Condition:
                  StringEqualsIfExists:
                    "iam:PassedToService":
                      - "cloudformation.amazonaws.com"
                      - "elasticbeanstalk.amazonaws.com"
                      - "ec2.amazonaws.com"
                      - "ecs-tasks.amazonaws.com"
        - PolicyName: "CodeCommitPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "codecommit:CancelUploadArchive"
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:GetRepository"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:UploadArchive"
                Resource: "*"
        - PolicyName: "CodeDeployPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplication"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
                Resource: "*"
        - PolicyName: "CodeStarConnectionsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "codestar-connections:UseConnection"
                Resource: "*"
        - PolicyName: "InfrastructurePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "elasticbeanstalk:*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                  - "s3:*"
                  - "sns:*"
                  - "cloudformation:*"
                  - "rds:*"
                  - "sqs:*"
                  - "ecs:*"
                Resource: "*"
        - PolicyName: "LambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:ListFunctions"
                Resource: "*"
        - PolicyName: "OpsWorksPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "opsworks:CreateDeployment"
                  - "opsworks:DescribeApps"
                  - "opsworks:DescribeCommands"
                  - "opsworks:DescribeDeployments"
                  - "opsworks:DescribeInstances"
                  - "opsworks:DescribeStacks"
                  - "opsworks:UpdateApp"
                  - "opsworks:UpdateStack"
                Resource: "*"
        - PolicyName: "CloudFormationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:SetStackPolicy"
                  - "cloudformation:ValidateTemplate"
                Resource: "*"
        - PolicyName: "CodeBuildPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuildBatches"
                  - "codebuild:StartBuildBatch"
                Resource: "*"
        - PolicyName: "DeviceFarmPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "devicefarm:ListProjects"
                  - "devicefarm:ListDevicePools"
                  - "devicefarm:GetRun"
                  - "devicefarm:GetUpload"
                  - "devicefarm:CreateUpload"
                  - "devicefarm:ScheduleRun"
                Resource: "*"
        - PolicyName: "ServiceCatalogPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "servicecatalog:ListProvisioningArtifacts"
                  - "servicecatalog:CreateProvisioningArtifact"
                  - "servicecatalog:DescribeProvisioningArtifact"
                  - "servicecatalog:DeleteProvisioningArtifact"
                  - "servicecatalog:UpdateProduct"
                Resource: "*"
        - PolicyName: "ECRPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:DescribeImages"
                Resource: "*"
        - PolicyName: "StepFunctionsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "states:DescribeExecution"
                  - "states:DescribeStateMachine"
                  - "states:StartExecution"
                Resource: "*"
        - PolicyName: "AppConfigPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "appconfig:StartDeployment"
                  - "appconfig:StopDeployment"
                  - "appconfig:GetDeployment"
                Resource: "*"
        - PolicyName: "LogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:<region>:<account-id>:log-group:/aws/codepipeline/etlJob-clone"
                  - "arn:aws:logs:<region>:<account-id>:log-group:/aws/codepipeline/etlJob-clone:log-stream:*"
